<div class="row">
  <div class="col">
    <div class="card">
      <div class="card-body">
        <div class="d-flex mb-4 justify-content-between" style="align-items: center; ">
          <h5 class="card-title" style="margin: 0;">{{title}}</h5>
          <button class="btn btn-primary" onclick="openModal()">
            Matn qo'shish
          </button>
        </div>
        <table class="table table-hover">
          <thead>
            <tr>
              <th width="1%">№</th>
              <th scope="col">Nomi</th>
              <th scope="col">Sharq tili</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {{#each texts}}
            <tr>
              <td>{{increment @index}}</td>
              <td>{{title}}</td>
              <td>{{languageId.title}}</td>
              <td>
                <button class="btn badge bg-success me-3" onclick="openText('{{content}}')">Matnni korish</button>
                <a href="/admin/text/delete/{{_id}}" class="badge bg-danger">O'chirish</a>
              </td>
            </tr>
            {{/each}}
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-modal="true"
  role="dialog">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
      <form action="/admin/text" method="post" action="">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalScrollableTitle">
            Sharq tillariga matn qo'shish
          </h5>
          <button type="button" class="btn-close" onclick="closeModal()"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" name="_csrf" value="{{csrf}}" />
          <div class="mb-3">
            <label for="selectLabel" class="form-label">Tilni tanlang</label>
            <select name="languageId" class="form-control" id="selectLabel">
              {{#each languages}}
              <option value="{{_id}}">{{title}}</option>
              {{/each}}
            </select>
          </div>
          <div class="mb-3">
            <label for="titleInput" class="form-label">Nom kiriting</label>
            <input type="text" name="title" class="form-control" id="titleInput">
          </div>
          <div class="mb-3">
            <label for="textInput" class="form-label">Matn kiriting</label>
            <textarea name="content" class="form-control" id="textInput" rows="6"></textarea>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal()">Bekor qilish</button>
          <button type="submit" class="btn btn-primary">Saqlash</button>
        </div>
      </form>
    </div>
  </div>
</div>
<div class="modal fade" id="modal1" tabindex="-1"  aria-modal="true"
  role="dialog">
  <div class="modal-dialog modal-dialog-scrollable">
    <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalScrollableTitle">
            Matnni ko'rish
          </h5>
          <button type="button" class="btn-close" onclick="closeModal1()"></button>
        </div>
        <div class="modal-body">
          <textarea id="txtFld">Hello world.</textarea>
          <p class="card-description" id="content">
          </p>
          <div id="wrapper">
  <div class="uiunit">
    <label for="languageMenu">Language: </label>
    <select id="languageMenu">
      <option selected value="ko">Show All</option>
    </select>
    {{!-- <input type="text" id="LanguageMenu" value="ko"> --}}
  </div>
  <div class="uiunit" style="display: none;">
    <label for="speakerMenu">Voice: </label><select id="speakerMenu" value="0"></select>
  </div>
  <div class="uiunit">
    <input type="hidden" id="rateFld" min="0.5" max="2" step="0.1" value="0.8">
  </div>
  <label for="txtFld">Choose a language to display a translation of the English phrase “I enjoy the traditional music of
    my native country.”</label>
  <div style="text-align:left;">
    <button type="button" id="speakBtn">Speak</button>
    <br>
  </div>
  <div id="temp"></div>
</div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" onclick="closeModal1()">Bekor qilish</button>
          <button type="submit" class="btn btn-primary">Saqlash</button>
        </div>
    </div>
  </div>
</div>

<div id="modal-backdrop"></div>

<script>
  function openModal() {
    document.body.classList.add("modal-open");
    document.getElementById('modal-backdrop').classList.add("modal-backdrop", "show");
    document.getElementById('modal').classList.add("show");
    document.getElementById('modal').style.display = "block";
  }

  function closeModal() {
    document.body.classList.remove("modal-open");
    document.getElementById('modal-backdrop').classList.remove("modal-backdrop", "show", "fade");
    document.getElementById('modal').classList.remove("show");
    document.getElementById('modal').style.display = "none";
  }
  
  function closeModal1() {
    document.getElementById('content').innerHTML = '';
    document.body.classList.remove("modal-open");
    document.getElementById('modal-backdrop').classList.remove("modal-backdrop", "show", "fade");
    document.getElementById('modal1').classList.remove("show");
    document.getElementById('modal1').style.display = "none";
  }
  openText = (content) => {
    document.getElementById('content').innerHTML = content;
    document.getElementById('txtFld').value = content;
    document.body.classList.add("modal-open");
    document.getElementById('modal-backdrop').classList.add("modal-backdrop", "show");
    document.getElementById('modal1').classList.add("show");
    document.getElementById('modal1').style.display = "block";
  }
</script>


<script>
  let allVoices, allLanguages, primaryLanguages, langtags, langhash, langcodehash;
  let txtFld, rateFld, speakBtn, speakerMenu, languageMenu, blurbs;
  let voiceIndex = 0;
  let initialSetup = true;
  let defaultBlurb = "I enjoy the traditional music of my native country.";

  function init() {
    speakBtn = qs("#speakBtn");
    txtFld = qs("#txtFld");
    speakerMenu = qs("#speakerMenu");
    langtags = getLanguageTags();
    speakBtn.addEventListener("click", talk, false);
    speakerMenu.addEventListener("change", selectSpeaker, false);
    createBlurbs();
    rateFld = qs("#rateFld");
    languageMenu = qs("#languageMenu");
    languageMenu.addEventListener("change", selectLanguage, false);
    langhash = getLookupTable(langtags, "name");
    langcodehash = getLookupTable(langtags, "code");
    if (window.speechSynthesis) {
      if (speechSynthesis.onvoiceschanged !== undefined) {
        //Chrome gets the voices asynchronously so this is needed
        speechSynthesis.onvoiceschanged = setUpVoices;
      }
      setUpVoices(); //for all the other browsers
    } else {
      speakBtn.disabled = true;
      speakerMenu.disabled = true;
      languageMenu.disabled = true;
      qs("#warning").style.display = "block";
    }
  }

  function setUpVoices() {
    allVoices = getAllVoices();
    allLanguages = getAllLanguages(allVoices);
    primaryLanguages = getPrimaryLanguages(allLanguages);
    filterVoices();
    if (initialSetup && allVoices.length) {
      initialSetup = false;
      createLanguageMenu();
    }
  }

  function talk() {
    let sval = Number(speakerMenu.value);
    let u = new SpeechSynthesisUtterance();
    u.voice = allVoices[sval];
    u.lang = u.voice.lang;
    u.text = txtFld.value;
    u.rate = Number(rateFld.value);
    console.log(u);
    speechSynthesis.speak(u);
  }

  function createLanguageMenu() {
    let code = `<option selected value="all">Show All</option>`;
    let langnames = [];
    primaryLanguages.forEach(function (lobj, i) {
      langnames.push(langcodehash[lobj.substring(0, 2)].name);
    });
    langnames.sort();
    langnames.forEach(function (lname, i) {
      let lcode = langhash[lname].code;
      code += `<option value=${lcode}>${lname}</option>`;
    });
    languageMenu.innerHTML = code;
  }

  function createSpeakerMenu(voices) {
    let code = ``;
    voices.forEach(function (vobj, i) {
      code += `<option value=${vobj.id}>${vobj.name} (${vobj.lang})`;
      code += vobj.voiceURI.includes(".premium") ? ' (premium)' : ``;
      code += `</option>`;
    });
    speakerMenu.innerHTML = code;
  }

  function getAllLanguages(voices) {
    let langs = [];
    voices.forEach(vobj => {
      langs.push(vobj.lang.trim());
    });
    return [...new Set(langs)];
  }

  function getPrimaryLanguages(langlist) {
    let langs = [];
    langlist.forEach(vobj => {
      langs.push(vobj.substring(0, 2));
    });
    return [...new Set(langs)];
  }

  function selectSpeaker() {
    voiceIndex = speakerMenu.selectedIndex;
  }

  function selectLanguage() {
    console.log("selectLanguage");
    filterVoices();
    speakerMenu.selectedIndex = 0;
  }

  function filterVoices() {
    let langcode = languageMenu.value;
    voices = allVoices.filter(function (voice) {
      return langcode === "all" ? true : voice.lang.indexOf(langcode + "-") >= 0;
    });
    createSpeakerMenu(voices);
    let t = blurbs[languageMenu.options[languageMenu.selectedIndex].text];
    txtFld.value = t ? t : defaultBlurb;
    speakerMenu.selectedIndex = voiceIndex;
  }

  function getAllVoices() {
    let voicesall = speechSynthesis.getVoices();
    let vuris = [];
    let voices = [];
    //unfortunately we have to check for duplicates
    voicesall.forEach(function (obj, index) {
      let uri = obj.voiceURI;
      if (!vuris.includes(uri)) {
        vuris.push(uri);
        voices.push(obj);
      }
    });
    voices.forEach(function (obj, index) {
      obj.id = index;
    });
    return voices;
  }

  function createBlurbs() {
    blurbs = {
      "Chinese": "我喜歡我祖國的傳統音樂。",
      "Dutch": "Ik geniet van de traditionele muziek van mijn geboorteland.",
      "English": "I enjoy the traditional music of my native country.",
      "French": "J'apprécie la musique traditionnelle de mon pays d'origine.",
      "German": "Ich genieße die traditionelle Musik meiner Heimat.",
      "Hindi": "मैं अपने मूल देश के पारंपरिक संगीत का आनंद लेता हूं।",
      "Indonesian": "Saya menikmati musik tradisional negara asal saya.",
      "Italian": "Mi piace la musica tradizionale del mio paese natale.",
      "Japanese": "私は母国の伝統音楽を楽しんでいます。",
      "Korean": "나는 내 조국의 전통 음악을 즐긴다.",
      "Polish": "Lubię tradycyjną muzykę mojego kraju.",
      "Portuguese": "Eu gosto da música tradicional do meu país natal.",
      "Russian": "Мне нравится традиционная музыка моей родной страны.",
    };
  }

  function getLanguageTags() {
    let langs = ["zh-Chinese",  "de-German",  "en-English", 
      "es-Spanish",   "fr-French",  "hi-Hindi", 
      "id-Indonesian", "it-Italian", "ja-Japanese", "ko-Korean",   "nl-Dutch",   "pl-Polish", "pt-Portuguese",
      "ru-Russian",  
      
    ];
    let langobjects = [];
    for (let i = 0; i < langs.length; i++) {
      let langparts = langs[i].split("-");
      langobjects.push({
        "code": langparts[0],
        "name": langparts[1]
      });
    }
    console.log(langobjects);
    return langobjects;
  }
  // Generic Utility Functions
  function qs(selectorText) {
    //saves lots of typing for those who eschew Jquery
    return document.querySelector(selectorText);
  }

  function getLookupTable(objectsArray, propname) {
    return objectsArray.reduce((accumulator, currentValue) => (accumulator[currentValue[propname]] = currentValue,
      accumulator), {});
  }
  document.addEventListener('DOMContentLoaded', function (e) {
    try {
      init();
    } catch (error) {
      console.log("Data didn't load", error);
    }
  });
</script>